package tutorials.doobie

import cats.effect.*
import doobie.{ HC, HPS }
import doobie.implicits.*
import doobie.util.transactor.Transactor
import doobie.util.update.Update

object DoobieDemo extends IOApp:

  case class Actor(id: Int, name: String)
  case class Movie(id: String, title: String, year: Int, actors: List[String], director: String)

  extension [A](io: IO[A])
    def debug: IO[A] = io.map { a =>
      println(s"[${Thread.currentThread.getName}] $a")
      a
    }

  val xa: Transactor[IO] = Transactor
    .fromDriverManager[IO](
      "org.postgresql.Driver",
      "jdbc:postgresql://localhost:5432/myimdb",
      "docker",
      "docker"
    )

  def findAllActorNames: IO[List[String]] =
    sql"select name from actors"
      .query[String]
      .to[List]
      .transact(xa)

  def streamAllActorNames: fs2.Stream[IO, String] =
    sql"select name from actors"
      .query[String]
      .stream // it's possible to convert the stream to a list by calling '.compile.toList' here
      .transact(xa)

  def findActorById(id: String): IO[Actor] =
    sql"select id, name from actors where id = $id"
      .query[Actor]
      .unique
      .transact(xa)

  def findActorByName(name: String): IO[Option[Actor]] =
    sql"select id, name from actors where name = $name"
      .query[Actor]
      .option
      .transact(xa)

  def findActorByName2(name: String): IO[Option[Actor]] =
    HC.stream[Actor](
      "select id, name from actors where name = ?",
      HPS.set(name),
      100
    ).compile
      .toList
      .map(_.headOption)
      .transact(xa)

  def findActorsByInitialLetter(ch: Char): IO[List[Actor]] =
    val select    = fr"select id, name"
    val from      = fr"from actors"
    val where     = fr"where LEFT(name, 1) = ${ch.toString}"
    val statement = select ++ from ++ where
    statement
      .query[Actor]
      .stream
      .compile
      .toList
      .transact(xa)

  def saveActor(id: Int, name: String): IO[Int] =
    sql"insert into actors (id, name) values ($id, $name)" //
      .update                                              //
      .run
      .transact(xa)

  def saveActor(actor: Actor): IO[Int] =
    Update[Actor]("insert into actors (id, name) values (?, ?)")
      .run(actor)
      .transact(xa)

  def saveActorAutoGenerated(name: String): IO[Int] =
    sql"insert into actors (name) values ($name)" //
      .update
      .withUniqueGeneratedKeys[Int]("id")
      .transact(xa)

  def saveActors(names: List[String]): IO[List[Actor]] =
    Update[String]("insert into actors (name) values (?)")
      .updateManyWithGeneratedKeys[Actor]("id", "name")(names)
      .compile
      .toList
      .transact(xa)

  override def run(args: List[String]): IO[ExitCode] =
    IO(println("Hello, doobie")).as(ExitCode.Success)
